homeassistant:
  customize:
    binary_sensor.house_sts_hvac_cool_req:
      device_class: cold
    binary_sensor.house_sts_hvac_heat_req:
      device_class: heat
    binary_sensor.house_sts_hvac_run:
      device_class: power
    binary_sensor.house_sts_hvac_shut:
      device_class: door

template:
  - trigger:
      - platform: time_pattern
        hours: /1
    action:
      - service: weather.get_forecasts
        data:
          type: twice_daily
        target:
          entity_id: weather.karb_daynight
        response_variable: high
    sensor:
      - name: daily_high
        unique_id: daily_high
        state: >
          {%set highlist = high['weather.karb_daynight']['forecast'][0]['temperature'],high['weather.karb_daynight']['forecast'][1]['temperature'],high['weather.karb_daynight']['forecast'][2]['temperature']%} {{ highlist|max |float }}

  - binary_sensor:
      - name: house_sts_hvac_shut
        state: >
          {{ is_state('binary_sensor.hall_window_opened', 'off')
             and is_state('binary_sensor.sliding_glass_door_opened', 'off')
             and is_state('binary_sensor.livingroom_door_opened', 'off') 
             and is_state('binary_sensor.living_room_window', 'off') }}
        delay_off:
          minutes: 5

  - binary_sensor:
      - name: house_sts_hvac_cool_req
        state: >
          {{ state_attr('weather.karb_daynight', 'temperature')|float(default=0) > states('input_number.hvac_ac_enable_temp')|float(default=0)
             or states('sensor.daily_high')|float(default=0) > states('input_number.hvac_ac_enable_temp')|float(default=0)}}
        delay_off:
          minutes: 30
        delay_on:
          minutes: 5

  - binary_sensor:
      - name: house_sts_hvac_heat_req
        state: >
          {{ state_attr('weather.karb_daynight', 'temperature')|float(default=0) < states('input_number.hvac_heat_enable_temp')|float
             and states('sensor.daily_high')|float(default=0) < states('input_number.hvac_heat_enable_temp')|float}}
        delay_off:
          minutes: 30
        delay_on:
          minutes: 5

  - binary_sensor:
      - name: house_sts_hvac_req
        state: >
          {{ is_state('binary_sensor.house_sts_hvac_cool_req', 'on')
             or is_state('binary_sensor.house_sts_hvac_heat_req', 'on') }}

  - binary_sensor:
      - name: house_sts_hvac_run
        state: >
          {{ is_state('binary_sensor.house_sts_hvac_req', 'on')
             and is_state('binary_sensor.house_sts_hvac_shut', 'on') }}

  - binary_sensor:
      - name: house_sts_hum_active_req
        state: >
          {{ is_state('binary_sensor.house_sts_hvac_heat_req', 'on')
             and states('sensor.hvac_humidity')|float(default=0) < states('sensor.hvac_target_humidity')|float-5 }}
        delay_off:
          minutes: 10

  - binary_sensor:
      - name: house_sts_hum_passive_run
        state: >
          {{ is_state('binary_sensor.house_sts_hum_passive_req', 'on')
             and is_state('sensor.hvac_fan_state', 'on') }}

  - binary_sensor:
      - name: hvac_running
        state: >
          {{ state_attr('climate.hvac_local','hvac_action') == 'heating'
             or state_attr('climate.hvac_local','hvac_action') == 'cooling' }}

  - binary_sensor:
      - name: hvac_fan_req
        state: >
          {{ is_state('binary_sensor.hvac_running', 'on')
             or is_state('binary_sensor.house_sts_hum_active_req', 'on')
             or ((60 - now().minute)) <= (20-(states('sensor.hvac_on_timer')|float*60))
             or now().hour == 19 }}
             
  - sensor:
      - name: hvac_target_humidity
        unit_of_measurement: "%"
        state: >
          {% if ((0.0049*state_attr('weather.karb_daynight', 'temperature')|float(default=0)+0.2668)*100) > states('input_number.hvac_humidity_max')|float(default=0) %}
            {{ states('input_number.hvac_humidity_max')| float(default='0') }}
          {% else %} 
            {{ (0.0049*state_attr('weather.karb_daynight', 'temperature')|float(default=0)+0.2668)*100 }}
          {% endif %}

sensor:
  - platform: history_stats
    name: hvac_on_timer
    entity_id: binary_sensor.hvac_fan_req
    state: "on"
    type: time
    start: "{{ now().replace(minute=0, second=0, microsecond=0) }}"
    end: "{{ now() }}"


automation:
  - id: 'house_hvac_set'
    alias: house_hvac_set
    initial_state: 'off'
    trigger:
    - entity_id: binary_sensor.house_sts_dte_cheap
      platform: state
    - entity_id: binary_sensor.house_sts_guest
      platform: state
    - entity_id: binary_sensor.house_sts_vacation
      platform: state
    - entity_id: binary_sensor.house_sts_incoming
      platform: state
    - entity_id: binary_sensor.house_sts_hvac_run
      platform: state
    condition: []
    action:
    - data:
        entity_id: script.hvac_run_stop_uni
      service: script.turn_on

  - id: 'house_humid'
    alias: house_humid
    initial_state: 'off'
    trigger:
    - entity_id: sensor.hvac_target_humidity
      platform: state
    condition: []
    action:
    - service: humidifier.set_humidity
      target:
        entity_id: humidifier.house
      data:
        humidity: >
          {{ states('sensor.hvac_target_humidity')|int(default=20) }}


  - id: 'house_booster_on'
    alias: house_booster_on
    initial_state: 'off'
    trigger:
    - entity_id: binary_sensor.hvac_fan_req
      platform: state
    condition: []
    action:
    - data:
        entity_id: climate.hvac_local
        fan_mode: >
          {% if is_state('binary_sensor.hvac_fan_req', 'on') %}
            Low
          {% else %} 
            Auto low
          {% endif %}
      service: climate.set_fan_mode



script:
  hvac_run_stop_uni:
    alias: HVAC Run Stop (Unified)
    sequence:
      # Set HVAC Mode
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.house_sts_hvac_run
                state: 'off'
            sequence:
              - service: climate.set_hvac_mode
                target:
                  entity_id: climate.hvac_local
                data:
                  hvac_mode: off
        default:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: binary_sensor.house_sts_hvac_cool_req
                    state: 'on'
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: climate.hvac_local
                    data:
                      hvac_mode: cool
            default:
              - service: climate.set_hvac_mode
                target:
                  entity_id: climate.hvac_local
                data:
                  hvac_mode: heat
      # Apply temperature setpoint (only if HVAC should run)
      - condition: state
        entity_id: binary_sensor.house_sts_hvac_run
        state: 'on'
      - choose:
          # Cooling Logic
          - conditions:
              - condition: state
                entity_id: binary_sensor.house_sts_hvac_cool_req
                state: 'on'
            sequence:
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.house_sts_vacation
                        state: 'on'
                    sequence:
                      - service: climate.set_temperature
                        target:
                          entity_id: climate.hvac_local
                        data:
                          temperature: "{{ states('input_number.hvac_vacation_ac_temp') | float }}"
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.house_sts_dte_cheap
                        state: 'on'
                    sequence:
                      - service: climate.set_temperature
                        target:
                          entity_id: climate.hvac_local
                        data:
                          temperature: "{{ states('input_number.hvac_overnight_ac_temp') | float }}"
                  - conditions:
                      - condition: or
                        conditions:
                          - condition: state
                            entity_id: binary_sensor.house_sts_occupants
                            state: 'on'
                          - condition: state
                            entity_id: binary_sensor.house_sts_incoming
                            state: 'on'
                          - condition: state
                            entity_id: binary_sensor.house_sts_guest
                            state: 'on'
                    sequence:
                      - service: climate.set_temperature
                        target:
                          entity_id: climate.hvac_local
                        data:
                          temperature: "{{ states('input_number.hvac_home_ac_temp') | float }}"
                default:
                  - service: climate.set_temperature
                    target:
                      entity_id: climate.hvac_local
                    data:
                      temperature: "{{ states('input_number.hvac_away_ac_temp') | float }}"
          # Heating Logic
          - conditions:
              - condition: state
                entity_id: binary_sensor.house_sts_hvac_heat_req
                state: 'on'
            sequence:
              - choose:
                  - conditions:
                      - condition: state
                        entity_id: binary_sensor.house_sts_vacation
                        state: 'on'
                    sequence:
                      - service: climate.set_temperature
                        target:
                          entity_id: climate.hvac_local
                        data:
                          temperature: "{{ states('input_number.hvac_vacation_heat_temp') | float }}"
                  - conditions:
                      - condition: state
                        entity_id: sensor.timeday
                        state: 'night'
                    sequence:
                      - service: climate.set_temperature
                        target:
                          entity_id: climate.hvac_local
                        data:
                          temperature: "{{ states('input_number.hvac_overnight_heat_temp') | float }}"
                  - conditions:
                      - condition: or
                        conditions:
                          - condition: state
                            entity_id: binary_sensor.house_sts_occupants
                            state: 'on'
                          - condition: state
                            entity_id: binary_sensor.house_sts_incoming
                            state: 'on'
                          - condition: state
                            entity_id: binary_sensor.house_sts_guest
                            state: 'on'
                    sequence:
                      - service: climate.set_temperature
                        target:
                          entity_id: climate.hvac_local
                        data:
                          temperature: "{{ states('input_number.hvac_home_heat_temp') | float }}"
                default:
                  - service: climate.set_temperature
                    target:
                      entity_id: climate.hvac_local
                    data:
                      temperature: "{{ states('input_number.hvac_away_heat_temp') | float }}"
      # Humidifier control
      - choose:
          - conditions:
              - condition: state
                entity_id: binary_sensor.house_sts_hvac_heat_req
                state: 'on'
            sequence:
              - service: humidifier.turn_on
                target:
                  entity_id: humidifier.house
        default:
          - service: humidifier.turn_off
            target:
              entity_id: humidifier.house


