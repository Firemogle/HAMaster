packages:
  va_board: !include 
    file: voice-scripts.yaml
    vars:
      devicename: ${devicename}

voice_assistant:
  id: va
  microphone: external_mic
  media_player: ${devicename}_media
  use_wake_word: false
  noise_suppression_level: 2
  auto_gain: 31 dbfs
  volume_multiplier: 10
  on_client_connected:
    - lambda: id(init_in_progress) = true;
    - script.execute: control_leds
    - micro_wake_word.start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
    - script.execute: control_leds
  on_client_disconnected:
    - voice_assistant.stop:
  #on_error:
  # When the voice assistant starts: Play a wake up sound, duck audio.
  on_start:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 20  # Number of dB quieter; higher implies more quiet, 0 implies full volume
        duration: 0.0s         # The duration of the transition (default is no transition)
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_waiting_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_for_command_phase_id};
    - script.execute: control_leds
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: control_leds
  on_tts_start:
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: control_leds
  on_end:
    - light.turn_on:
        id: ${devicename}_status
        brightness: 75%
        red: 100%
        green: 0%
        blue: 0%
    - wait_until:
        not:
          voice_assistant.is_running:
    - light.turn_off:
        id: ${devicename}_status
    - micro_wake_word.stop:
    - delay: 3s
    - micro_wake_word.start:
    - mixer_speaker.apply_ducking:
        id: media_mixing_input
        decibel_reduction: 0
        duration: 1.0s
    # Stop the script that would potentially enable the stop word if the response is longer than a second
    #- script.stop: activate_stop_word_if_tts_step_is_long
    # Disable the stop word (If the tiemr is not ringing)
  on_timer_finished:
    - switch.turn_on: timer_ringing
  on_timer_started:
    - script.execute: control_leds
  on_timer_cancelled:
    - script.execute: control_leds
  on_timer_updated:
    - script.execute: control_leds
  on_timer_tick:
    - script.execute: control_leds

micro_wake_word:
  microphone: external_mic
  models:
    - model: okay_nabu
    - model: https://github.com/kahrendt/microWakeWord/releases/download/stop/stop.json
  vad:
  on_wake_word_detected: 
    - if:
        condition:
          switch.is_on: timer_ringing
        then:
          - switch.turn_off: timer_ringing
        # Start voice assistant, stop current announcement.
        else:
          - if:
              condition:
                media_player.is_announcing:
              then:
                media_player.stop:
                  announcement: true
              else:
                - voice_assistant.start:
                    wake_word: !lambda return wake_word;
    - light.turn_on:
        id: ${devicename}_status
        brightness: 50%
        transition_length: 0s
    
