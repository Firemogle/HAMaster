esphome:
  name: server_control
  platform: ESP32
  board: nodemcu-32s

globals:
  - id: channel_count
    type: int
    restore_value: no
    initial_value: '0'

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  power_pin: GPIO12

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret AP_PW

ota:
  password: !secret OTA_PW


i2c:
   sda: GPIO13
   scl: GPIO16
    
pca9685:
  frequency: 1500
  
output:
  - platform: pca9685
    id: 'fan_00_pwm'
    channel: 0
  - platform: pca9685
    id: 'fan_01_pwm'
    channel: 1
  - platform: pca9685
    id: 'fan_02_pwm'
    channel: 2
  - platform: pca9685
    id: 'fan_03_pwm'
    channel: 3
  - platform: pca9685
    id: 'fan_10_pwm'
    channel: 4
  - platform: pca9685
    id: 'fan_11_pwm'
    channel: 5
  - platform: pca9685
    id: 'fan_12_pwm'
    channel: 6
  - platform: pca9685
    id: 'fan_13_pwm'
    channel: 7
  - platform: pca9685
    id: 'fan_14_pwm'
    channel: 8
  - platform: pca9685
    id: 'fan_15_pwm'
    channel: 9
  - platform: pca9685
    id: 'mux_0'
    channel: 10
  - platform: pca9685
    id: 'mux_1'
    channel: 11
  - platform: pca9685
    id: 'mux_2'
    channel: 12
  - platform: pca9685
    id: 'mux_3'
    channel: 13
  - platform: ledc
    pin: GPIO19     # Need to find good pin
    id: baffle_servo
    frequency: 50 Hz
    
servo:
  - id: baffle_control
    output: baffle_servo
    min_level: 2%
    idle_level: 5%
    max_level: 10%
    
fan:
  - platform: speed
    output: fan_00_pwm
    name: "Fan 00"
  - platform: speed
    output: fan_01_pwm
    name: "Fan 01"
  - platform: speed
    output: fan_02_pwm
    name: "Fan 02"
  - platform: speed
    output: fan_03_pwm
    name: "Fan 03"
  - platform: speed
    output: fan_10_pwm
    name: "Fan 10"
  - platform: speed
    output: fan_11_pwm
    name: "Fan 11"
  - platform: speed
    output: fan_12_pwm
    name: "Fan 12"
  - platform: speed
    output: fan_13_pwm
    name: "Fan 13"
  - platform: speed
    output: fan_14_pwm
    name: "Fan 14"
    
sensor:
  - platform: bme280
    temperature:
      name: server_intake_temp
      oversampling: 16x
    humidity:
      name: server_intake_humidity
    address: 0x76
    pressure:
      name: server_intake_pressure
    update_interval: 60s
    
  - platform: template
    name: "fan_00_rpm"
    id: fan_00_rpm
    
  - platform: template
    name: "fan_01_rpm"
    id: fan_01_rpm
        
  - platform: template
    name: "fan_02_rpm"
    id: fan_02_rpm
    
  - platform: template
    name: "fan_03_rpm"
    id: fan_03_rpm

  - platform: template
    name: "fan_10_rpm"
    id: fan_10_rpm
    
  - platform: template
    name: "fan_11_rpm"
    id: fan_11_rpm
        
  - platform: template
    name: "fan_12_rpm"
    id: fan_12_rpm
    
  - platform: template
    name: "fan_13_rpm"
    id: fan_13_rpm
    
  - platform: template
    name: "fan_14_rpm"
    id: fan_14_rpm
    
  - platform: pulse_counter
    pin: GPIO39
    id: raw_fan_rpm
    name: "raw_rpm"
    internal: true
    on_value:
      then:
        - lambda: |-
            if (id(channel_count) & 1) {
              id(mux_0).set_level(1);
            } else {
              id(mux_0).set_level(0);
            }
            if ((id(channel_count) & 2) >> 1) {
              id(mux_1).set_level(1);
            } else {
              id(mux_1).set_level(0);
            }
            if ((id(channel_count) & 4) >> 2) {
              id(mux_2).set_level(1);
            } else {
              id(mux_2).set_level(0);
            }
            switch(id(channel_count)) {
               case 0 :
                  id(fan_00_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 1 :
                  id(fan_01_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 2 :
                  id(fan_02_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 3 :
                  id(fan_03_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 4 :
                  id(fan_10_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 5 :
                  id(fan_11_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 6 :
                  id(fan_12_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 7 :
                  id(fan_13_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count)++;
                  break;
               case 8 :
                  id(fan_14_rpm).publish_state(id(raw_fan_rpm).state);
                  id(channel_count) = 0;
                  break;

