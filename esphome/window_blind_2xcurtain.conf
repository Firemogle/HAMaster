esphome:
  name: ${devicename}
  platform: ESP32
  board: nodemcu-32s

globals:
  - id: shade_max_pos
    type: int
    restore_value: true
    initial_value: '1'
  - id: curt1_max_pos
    type: int
    restore_value: true
    initial_value: '1'
  - id: curt2_max_pos
    type: int
    restore_value: true
    initial_value: '1'

wifi:
  ssid: !secret AP
  password: !secret APPW
  power_save_mode: none

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret OTA_PW

ota:
  password: !secret OTA_PW

i2c:
   sda: GPIO21
   scl: GPIO22
    
pcf8574:
  - id: 'pcf8574_hub'
    address: 0x21
    pcf8575: False
  
binary_sensor:
  - platform: gpio
    pin: 
      pcf8574: pcf8574_hub
      number: 17
      mode: INPUT
      inverted: False
    name: ${devicename}_motion
    id: ${devicename}_motion
    device_class: motion
    internal: false
  - platform: gpio
    pin: 36
    name: ${blind_stop}
    id: ${blind_stop}
    device_class: motion
    internal: false
  - platform: gpio
    pin: 27
    name: ${curt1_stop}
    id: ${curt1_stop}
    device_class: motion
    internal: false
  - platform: gpio
    pin: 32
    name: ${blind_stop}2
    id: ${blind_stop}2
    device_class: motion
    internal: false
  - platform: gpio
    pin: 15
    name: ${curt1_stop}2
    id: ${curt1_stop}2
    device_class: motion
    internal: false
    

sensor:
  - platform: bme280
    temperature:
      name: ${devicename}_temp
      oversampling: 16x
    humidity:
      name: ${devicename}_humidity
    address: 0x77
    pressure:
      name: ${devicename}_pressure
    update_interval: 60s
    
  - platform: tsl2561
    name: ${lux_name}
    address: 0x39
    update_interval: 60s
    
  - platform: ina3221
    address: 0x40
    channel_1:
      shunt_resistance: 0.05 ohm
      current:
        name: ${mot1_i_name}
      power:
        name: ${mot1_p_name}
      bus_voltage:
        name: ${mot1_vdd_name}
      shunt_voltage:
        name: ${mot1_sv_name}
    channel_2:
      shunt_resistance: 0.05 ohm
      current:
        name: ${mot2_i_name}
      power:
        name: ${mot2_p_name}
      bus_voltage:
        name: ${mot2_vdd_name}
      shunt_voltage:
        name: ${mot2_sv_name}
    channel_3:
      shunt_resistance: 0.05 ohm
      current:
        name: ${mot3_i_name}
      power:
        name: ${mot3_p_name}
      bus_voltage:
        name: ${mot3_vdd_name}
      shunt_voltage:
        name: ${mot3_sv_name}
    update_interval: 60s
    
  - platform: adc
    pin: 34
    attenuation: 11db
    name: motor_control_feedback
    update_interval: 60s
   

# Individual outputs
switch:
  - platform: gpio
    name: ${mot1_MS1_name}
    pin:
      pcf8574: pcf8574_hub
      number: 2
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: ${mot1_MS2_name}
    pin:
      pcf8574: pcf8574_hub
      number: 3
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: ${mot1_MS3_name}
    pin:
      pcf8574: pcf8574_hub
      number: 4
      mode: OUTPUT
      inverted: False

  - platform: gpio
    name: ${mot2_MS1_name}
    pin:
      pcf8574: pcf8574_hub
      number: 7
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: ${mot2_MS2_name}
    pin:
      pcf8574: pcf8574_hub
      number: 8
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: ${mot2_MS3_name}
    pin:
      pcf8574: pcf8574_hub
      number: 9
      mode: OUTPUT
      inverted: False

  - platform: gpio
    name: ${mot3_MS1_name}
    pin:
      pcf8574: pcf8574_hub
      number: 12
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: ${mot3_MS2_name}
    pin:
      pcf8574: pcf8574_hub
      number: 13
      mode: OUTPUT
      inverted: False
      
  - platform: gpio
    name: ${mot3_MS3_name}
    pin:
      pcf8574: pcf8574_hub
      number: 14
      mode: OUTPUT
      inverted: False
      
  - platform: gpio
    name: ${led_en}
    pin: 33
    inverted: True
      
output:
  - platform: ledc
    pin: 26
    id: current_set
    
light:
  - platform: monochromatic
    output: current_set
    name: motor_current_limit
    id: motor_current_limit
      
      
stepper:
  - platform: a4988
    id: ${blind_name}
    step_pin: GPIO17
    dir_pin:
      pcf8574: pcf8574_hub
      number: 1
      mode: OUTPUT
      inverted: False
    max_speed: 250 steps/s
    # Optional:
    sleep_pin:
      pcf8574: pcf8574_hub
      number: 0
      mode: OUTPUT
      inverted: true
    acceleration: inf
    deceleration: inf
    
  - platform: a4988
    id: ${curt1_name}
    step_pin: GPIO18
    dir_pin:
      pcf8574: pcf8574_hub
      number: 6
      mode: OUTPUT
      inverted: False
    max_speed: 250 steps/s
    # Optional:
    sleep_pin:
      pcf8574: pcf8574_hub
      number: 5
      mode: OUTPUT
      inverted: true
    acceleration: inf
    deceleration: inf
    
  - platform: a4988
    id: ${curt2_name}
    step_pin: GPIO17
    dir_pin:
      pcf8574: pcf8574_hub
      number: 11
      mode: OUTPUT
      inverted: False
    max_speed: 250 steps/s
    # Optional:
    sleep_pin:
      pcf8574: pcf8574_hub
      number: 10
      mode: OUTPUT
      inverted: true
    acceleration: inf
    deceleration: inf

cover:    
  - platform: template
    name: ${blind_name_cov}
    id: ${blind_name_cov}
    device_class: shade
    open_action:
      - stepper.set_target:
          id: ${blind_name}
          target: !lambda "return id(shade_max_pos);"
      - while:
          condition:
            lambda: |-
              return id(${blind_name_cov}).position != 1;
          then:
            - cover.template.publish:
                id: ${blind_name_cov}
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(${blind_name}).current_position) / float(id(shade_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${blind_name_cov}
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: ${blind_name}
          target: 0
      - while:
          condition:
            lambda: |-
              return id(${blind_name_cov}).position != 0;
          then:
            - cover.template.publish:
                id: ${blind_name_cov}
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(${blind_name}).current_position) / float(id(shade_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${blind_name_cov}
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: ${blind_name}
          target: !lambda return id(${blind_name}).current_position;
      - cover.template.publish:
          id: ${blind_name_cov}
          current_operation: IDLE
          position: !lambda 'return (float(float(id(${blind_name}).current_position) / float(id(shade_max_pos))));'
    position_action:
      - stepper.set_target:
          id: ${blind_name}
          target: !lambda return int(id(shade_max_pos)*pos);
      - while:
          condition:
            lambda: |-
              return id(${blind_name_cov}).position != pos;
          then:
            - cover.template.publish:
                id: ${blind_name_cov}
                current_operation: !lambda |-
                  if(pos > id(${blind_name_cov}).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(${blind_name}).current_position) / float(id(shade_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${blind_name_cov}
          current_operation: IDLE
          position: !lambda 'return (float(float(id(${blind_name}).current_position) / float(id(shade_max_pos))));'
    has_position: true
    optimistic: false 
    
  - platform: template
    name: ${curt1_name_cov}
    id: ${curt1_name_cov}
    device_class: curtain
    open_action:
      - stepper.set_target:
          id: ${curt1_name}
          target: !lambda "return id(curt1_max_pos);"
      - while:
          condition:
            lambda: |-
              return id(${curt1_name_cov}).position != 1;
          then:
            - cover.template.publish:
                id: ${curt1_name_cov}
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(${curt1_name}).current_position) / float(id(curt1_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${curt1_name_cov}
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: ${curt1_name}
          target: 0
      - while:
          condition:
            lambda: |-
              return id(${curt1_name_cov}).position != 0;
          then:
            - cover.template.publish:
                id: ${curt1_name_cov}
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(${curt1_name}).current_position) / float(id(curt1_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${curt1_name_cov}
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: ${curt1_name}
          target: !lambda return id(${curt1_name}).current_position;
      - cover.template.publish:
          id: ${curt1_name_cov}
          current_operation: IDLE
          position: !lambda 'return (float(float(id(${curt1_name}).current_position) / float(id(curt1_max_pos))));'
    position_action:
      - stepper.set_target:
          id: ${curt1_name}
          target: !lambda return int(id(curt1_max_pos)*pos);
      - while:
          condition:
            lambda: |-
              return id(${curt1_name_cov}).position != pos;
          then:
            - cover.template.publish:
                id: ${curt1_name_cov}
                current_operation: !lambda |-
                  if(pos > id(${curt1_name_cov}).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(${curt1_name}).current_position) / float(id(curt1_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${curt1_name_cov}
          current_operation: IDLE
          position: !lambda 'return (float(float(id(${curt1_name}).current_position) / float(id(curt1_max_pos))));'
    has_position: true
    optimistic: false

  - platform: template
    name: ${curt2_name_cov}
    id: ${curt2_name_cov}
    device_class: curtain
    open_action:
      - stepper.set_target:
          id: ${curt2_name}
          target: !lambda "return id(curt2_max_pos);"
      - while:
          condition:
            lambda: |-
              return id(${curt2_name_cov}).position != 1;
          then:
            - cover.template.publish:
                id: ${curt2_name_cov}
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(${curt2_name}).current_position) / float(id(curt2_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${curt2_name_cov}
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: ${curt2_name}
          target: 0
      - while:
          condition:
            lambda: |-
              return id(${curt2_name_cov}).position != 0;
          then:
            - cover.template.publish:
                id: ${curt2_name_cov}
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(${curt2_name}).current_position) / float(id(curt2_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${curt2_name_cov}
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: ${curt2_name}
          target: !lambda return id(${curt2_name}).current_position;
      - cover.template.publish:
          id: ${curt2_name_cov}
          current_operation: IDLE
          position: !lambda 'return (float(float(id(${curt2_name}).current_position) / float(id(curt2_max_pos))));'
    position_action:
      - stepper.set_target:
          id: ${curt2_name}
          target: !lambda return int(id(curt2_max_pos)*pos);
      - while:
          condition:
            lambda: |-
              return id(${curt2_name_cov}).position != pos;
          then:
            - cover.template.publish:
                id: ${curt2_name_cov}
                current_operation: !lambda |-
                  if(pos > id(${curt2_name_cov}).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(${curt2_name}).current_position) / float(id(curt2_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${curt2_name_cov}
          current_operation: IDLE
          position: !lambda 'return (float(float(id(${curt2_name}).current_position) / float(id(curt2_max_pos))));'
    has_position: true
    optimistic: false
