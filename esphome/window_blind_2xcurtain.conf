esphome:
  name: ${devicename}
  platform: ESP32
  board: nodemcu-32s

globals:
  - id: shade_max_pos
    type: int
    restore_value: true
    initial_value: '10000'
  - id: curt1_max_pos
    type: int
    restore_value: true
    initial_value: '10000'
  - id: curt2_max_pos
    type: int
    restore_value: true
    initial_value: '10000'

wifi:
  ssid: !secret AP
  password: !secret APPW
  power_save_mode: none

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret OTA_PW
  services:
    - service: ${devicename}_autocalibrate
      then:
        - while:
            condition:
              binary_sensor.is_on: blind_start
            then:
            - stepper.set_target:
                id: blind_step
                target: -100
            - delay: 0.5s
        - while:
            condition:
              binary_sensor.is_on: curt1_start
            then:
            - stepper.set_target:
                id: curt1_step
                target: -100
            - delay: 0.5s
        - while:
            condition:
              binary_sensor.is_on: curt2_start
            then:
            - stepper.set_target:
                id: curt2_step
                target: -100
            - delay: 0.5s
        - stepper.report_position:
            id: blind_step
            position: 0
        - stepper.report_position:
            id: curt1_step
            position: 0
        - stepper.report_position:
            id: curt2_step
            position: 0
        - while:
            condition:
              binary_sensor.is_on: blind_stop
            then:
            - stepper.set_target:
                id: blind_step
                target: 100
            - delay: 0.5s
        - while:
            condition:
              binary_sensor.is_on: curt1_stop
            then:
            - stepper.set_target:
                id: curt1_step
                target: 100
            - delay: 0.5s
        - while:
            condition:
              binary_sensor.is_on: curt2_stop
            then:
            - stepper.set_target:
                id: curt2_step
                target: 100
            - delay: 0.5s
        - globals.set:
            id: shade_max_pos
            value: id(blind_step).current_position
        - globals.set:
            id: curt1_max_pos
            value: id(curt1_step).current_position
        - globals.set:
            id: curt2_max_pos
            value: id(curt2_step).current_position
    - service: ${devicename}_initialize
      then:
        - while:
            condition:
              binary_sensor.is_on: blind_start
            then:
            - stepper.set_target:
                id: blind_step
                target: -100
            - delay: 0.5s
        - while:
            condition:
              binary_sensor.is_on: curt1_start
            then:
            - stepper.set_target:
                id: curt1_step
                target: -100
            - delay: 0.5s
        - while:
            condition:
              binary_sensor.is_on: curt2_start
            then:
            - stepper.set_target:
                id: curt2_step
                target: -100
            - delay: 0.5s
        - stepper.report_position:
            id: blind_step
            position: 0
        - stepper.report_position:
            id: curt1_step
            position: 0
        - stepper.report_position:
            id: curt2_step
            position: 0
    - service: ${devicename}_set_current
      variables:
        target: float
      then:
        - lambda: |-
            id(${devicename}_motor_current_limit).set_level(0.00000027 * (8*target*0.2)^3.61);            

ota:
  password: !secret OTA_PW

i2c:
   sda: GPIO21
   scl: GPIO22
    
pcf8574:
  - id: 'pcf8574_hub'
    address: 0x27
    pcf8575: True
  
binary_sensor:
  - platform: gpio
    pin: 
      pcf8574: pcf8574_hub
      number: 15
      mode: INPUT
      inverted: False
    name: ${devicename}_motion
    id: ${devicename}_motion
    device_class: motion
    internal: false
  - platform: gpio
    pin: 16
    name: blind_stop
    id: blind_stop
    device_class: motion
    internal: false
  - platform: gpio
    pin: 27
    name: curt1_stop
    id: curt1_stop
    device_class: motion
    internal: false
  - platform: gpio
    pin: 32
    name: curt2_stop
    id: curt2_stop
    device_class: motion
    internal: false
  - platform: gpio
    pin: 15
    name: blind_start
    id: blind_start
    device_class: motion
    internal: false
  - platform: gpio
    pin: 35
    name: curt1_start
    id: curt1_start
    device_class: motion
    internal: false
  - platform: gpio
    pin: 36
    name: curt2_start
    id: curt2_start
    device_class: motion
    internal: false
  - platform: gpio
    pin: 39
    name: ${curt1_stop}12
    id: ${curt1_stop}12
    device_class: motion
    internal: false
    
    
sensor:
  - platform: bme280
    temperature:
      name: ${devicename}_temp
      oversampling: 16x
    humidity:
      name: ${devicename}_humidity
    address: 0x77
    pressure:
      name: ${devicename}_pressure
    update_interval: 60s
    
  - platform: tsl2561
    name: ${devicename}_lux
    address: 0x39
    update_interval: 60s
    
  - platform: ina3221
    address: 0x40
    channel_1:
      shunt_resistance: 0.05 ohm
      current:
        name: ${mot1_i_name}
      power:
        name: ${mot1_p_name}
      bus_voltage:
        name: ${mot1_vdd_name}
      shunt_voltage:
        name: ${mot1_sv_name}
    channel_2:
      shunt_resistance: 0.05 ohm
      current:
        name: ${mot2_i_name}
      power:
        name: ${mot2_p_name}
      bus_voltage:
        name: ${mot2_vdd_name}
      shunt_voltage:
        name: ${mot2_sv_name}
    channel_3:
      shunt_resistance: 0.05 ohm
      current:
        name: ${mot3_i_name}
      power:
        name: ${mot3_p_name}
      bus_voltage:
        name: ${mot3_vdd_name}
      shunt_voltage:
        name: ${mot3_sv_name}
    update_interval: 60s
    
  - platform: adc
    pin: 34
    attenuation: 11db
    name: motor_control_feedback
    update_interval: 60s
   

# Individual outputs
switch:
  - platform: gpio
    name: mot1_MS1
    pin:
      pcf8574: pcf8574_hub
      number: 2
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: mot1_MS2
    pin:
      pcf8574: pcf8574_hub
      number: 3
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: mot1_MS3
    pin:
      pcf8574: pcf8574_hub
      number: 4
      mode: OUTPUT
      inverted: False

  - platform: gpio
    name: mot2_MS1
    pin:
      pcf8574: pcf8574_hub
      number: 7
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: mot2_MS2
    pin:
      pcf8574: pcf8574_hub
      number: 8
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: mot2_MS3
    pin:
      pcf8574: pcf8574_hub
      number: 9
      mode: OUTPUT
      inverted: False

  - platform: gpio
    name: mot3_MS1
    pin:
      pcf8574: pcf8574_hub
      number: 12
      mode: OUTPUT
      inverted: False
  - platform: gpio
    name: mot3_MS2
    pin:
      pcf8574: pcf8574_hub
      number: 13
      mode: OUTPUT
      inverted: False
      
  - platform: gpio
    name: mot3_MS3
    pin:
      pcf8574: pcf8574_hub
      number: 14
      mode: OUTPUT
      inverted: False
      
  - platform: gpio
    name: ${devicename}_led_en
    pin: 33
    inverted: True
      
output:
  - platform: ledc
    pin: 26
    id: current_set
    frequency: "19531Hz"
    
light:
  - platform: monochromatic
    output: current_set
    name: ${devicename}_motor_current_limit
    id: ${devicename}_motor_current_limit
      
      
stepper:
  - platform: a4988
    id: blind_step
    step_pin: GPIO17
    dir_pin:
      pcf8574: pcf8574_hub
      number: 1
      mode: OUTPUT
      inverted: False
    max_speed: 250 steps/s
    # Optional:
    sleep_pin:
      pcf8574: pcf8574_hub
      number: 0
      mode: OUTPUT
      inverted: true
    acceleration: inf
    deceleration: inf
    
  - platform: a4988
    id: curt1_step
    step_pin: GPIO18
    dir_pin:
      pcf8574: pcf8574_hub
      number: 6
      mode: OUTPUT
      inverted: False
    max_speed: 250 steps/s
    # Optional:
    sleep_pin:
      pcf8574: pcf8574_hub
      number: 5
      mode: OUTPUT
      inverted: true
    acceleration: inf
    deceleration: inf
    
  - platform: a4988
    id: curt2_step
    step_pin: GPIO19
    dir_pin:
      pcf8574: pcf8574_hub
      number: 11
      mode: OUTPUT
      inverted: False
    max_speed: 250 steps/s
    # Optional:
    sleep_pin:
      pcf8574: pcf8574_hub
      number: 10
      mode: OUTPUT
      inverted: true
    acceleration: inf
    deceleration: inf

cover:    
  - platform: template
    name: ${devicename}_blind
    id: ${devicename}_blind
    device_class: shade
    open_action:
      - stepper.set_target:
          id: blind_step
          target: !lambda "return id(shade_max_pos);"
      - while:
          condition:
            lambda: |-
              return id(${devicename}_blind).position != 1;
          then:
            - cover.template.publish:
                id: ${devicename}_blind
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(blind_step).current_position) / float(id(shade_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_blind
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: blind_step
          target: 0
      - while:
          condition:
            lambda: |-
              return id(${devicename}_blind).position != 0;
          then:
            - cover.template.publish:
                id: ${devicename}_blind
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(blind_step).current_position) / float(id(shade_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_blind
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: blind_step
          target: !lambda return id(blind_step).current_position;
      - cover.template.publish:
          id: ${devicename}_blind
          current_operation: IDLE
          position: !lambda 'return (float(float(id(blind_step).current_position) / float(id(shade_max_pos))));'
    position_action:
      - stepper.set_target:
          id: blind_step
          target: !lambda return int(id(shade_max_pos)*pos);
      - while:
          condition:
            lambda: |-
              return id(${devicename}_blind).position != pos;
          then:
            - cover.template.publish:
                id: ${devicename}_blind
                current_operation: !lambda |-
                  if(pos > id(${devicename}_blind).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(blind_step).current_position) / float(id(shade_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_blind
          current_operation: IDLE
          position: !lambda 'return (float(float(id(blind_step).current_position) / float(id(shade_max_pos))));'
    has_position: true
    optimistic: false 
    
  - platform: template
    name: ${devicename}_curt1
    id: ${devicename}_curt1
    device_class: curtain
    open_action:
      - stepper.set_target:
          id: curt1_step
          target: !lambda "return id(curt1_max_pos);"
      - while:
          condition:
            lambda: |-
              return id(${devicename}_curt1).position != 1;
          then:
            - cover.template.publish:
                id: ${devicename}_curt1
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(curt1_step).current_position) / float(id(curt1_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_curt1
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: curt1_step
          target: 0
      - while:
          condition:
            lambda: |-
              return id(${devicename}_curt1).position != 0;
          then:
            - cover.template.publish:
                id: ${devicename}_curt1
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(curt1_step).current_position) / float(id(curt1_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_curt1
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: curt1_step
          target: !lambda return id(curt1_step).current_position;
      - cover.template.publish:
          id: ${devicename}_curt1
          current_operation: IDLE
          position: !lambda 'return (float(float(id(curt1_step).current_position) / float(id(curt1_max_pos))));'
    position_action:
      - stepper.set_target:
          id: curt1_step
          target: !lambda return int(id(curt1_max_pos)*pos);
      - while:
          condition:
            lambda: |-
              return id(${devicename}_curt1).position != pos;
          then:
            - cover.template.publish:
                id: ${devicename}_curt1
                current_operation: !lambda |-
                  if(pos > id(${devicename}_curt1).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(curt1_step).current_position) / float(id(curt1_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_curt1
          current_operation: IDLE
          position: !lambda 'return (float(float(id(curt1_step).current_position) / float(id(curt1_max_pos))));'
    has_position: true
    optimistic: false

  - platform: template
    name: ${devicename}_curt2
    id: ${devicename}_curt2
    device_class: curtain
    open_action:
      - stepper.set_target:
          id: curt2_step
          target: !lambda "return id(curt2_max_pos);"
      - while:
          condition:
            lambda: |-
              return id(${devicename}_curt2).position != 1;
          then:
            - cover.template.publish:
                id: ${devicename}_curt2
                current_operation: !lambda |-
                    return COVER_OPERATION_OPENING;
                position: !lambda 'return (float(float(id(curt2_step).current_position) / float(id(curt2_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_curt2
          current_operation: IDLE
          position: !lambda 'return 1;'
    close_action:
      - stepper.set_target:
          id: curt2_step
          target: 0
      - while:
          condition:
            lambda: |-
              return id(${devicename}_curt2).position != 0;
          then:
            - cover.template.publish:
                id: ${devicename}_curt2
                current_operation: !lambda |-
                    return COVER_OPERATION_CLOSING;
                position: !lambda 'return (float(float(id(curt2_step).current_position) / float(id(curt2_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_curt2
          current_operation: IDLE
          position: !lambda 'return 0;'
    stop_action:
      - stepper.set_target:
          id: curt2_step
          target: !lambda return id(curt2_step).current_position;
      - cover.template.publish:
          id: ${devicename}_curt2
          current_operation: IDLE
          position: !lambda 'return (float(float(id(curt2_step).current_position) / float(id(curt2_max_pos))));'
    position_action:
      - stepper.set_target:
          id: curt2_step
          target: !lambda return int(id(curt2_max_pos)*pos);
      - while:
          condition:
            lambda: |-
              return id(${devicename}_curt2).position != pos;
          then:
            - cover.template.publish:
                id: ${devicename}_curt2
                current_operation: !lambda |-
                  if(pos > id(${devicename}_curt2).position){
                    return COVER_OPERATION_OPENING;
                  } else {
                    return COVER_OPERATION_CLOSING;
                  }
                position: !lambda 'return (float(float(id(curt2_step).current_position) / float(id(curt2_max_pos))));'
            - delay: 1000 ms
      - cover.template.publish:
          id: ${devicename}_curt2
          current_operation: IDLE
          position: !lambda 'return (float(float(id(curt2_step).current_position) / float(id(curt2_max_pos))));'
    has_position: true
    optimistic: false
