#Define times of day for the house, early, morning, afternoon, evening and night

- platform: tod
  name: early_morning
  after: '05:30'
  before: '08:00'

- platform: tod
  name: morning
  after: '8:00'
  before: '12:00'

- platform: tod
  name: afternoon
  after: '12:00'
  before: sunset
  before_offset: '-00:30'
    
- platform: tod
  name: evening
  after: sunset
  after_offset: '-00:30'
  before: '23:59'

- platform: tod
  name: night
  after: '23:59'
  before: '05:30'

- platform: workday # Define workdays for house
  name: workday_raw
  country: US
  province: MI
  workdays: [mon, tue, wed, thu, fri]
  excludes: [sat, sun, holiday]

- platform: template # Use gcal to define if liz is working weird shifts
  sensors:
    house_time_liz_work_exception:
      value_template: >-
        {{ (as_timestamp(states.calendar.liz_work_exception.attributes.start_time) - 7200) < as_timestamp(now()) + (states('sensor.house_rand_0_100')|float)/100 }}

- platform: template # Define workday as normal or liz exception
  sensors:
    house_time_workday_combine:
      value_template: >-
        {{ is_state('binary_sensor.workday_raw', 'on') 
           or is_state('binary_sensor.house_time_liz_work_exception', 'on') }} 

- platform: template # Define wakeup time if workday determined
  sensors:
    work_wakeup_time:
      value_template: >-
        {{ is_state('binary_sensor.early_morning', 'on') 
           or is_state('binary_sensor.house_time_liz_work_exception', 'on')  }}  

- platform: template # House needs woken up for workdays
  sensors:
    house_wake_for_work:
      value_template: >-
        {{ is_state('binary_sensor.house_time_workday_combine', 'on') 
           and is_state('binary_sensor.work_wakeup_time', 'on')  }}  
           
- platform: template # House needs woken up for non-workdays
  sensors:
    house_weekend_wakeup:
      value_template: >-
        {{ is_state('binary_sensor.workday_raw', 'off') 
           and is_state('binary_sensor.morning', 'on')  }} 

- platform: template # Combine wakeups into one wake signal
  sensors:
    house_wakeup:
      value_template: >-
        {{ is_state('binary_sensor.house_wake_for_work', 'on') 
           or is_state('binary_sensor.house_weekend_wakeup', 'on')  }} 
           
           
- platform: template # Vacation morning
  sensors:
    house_wakeup_vacation_morning:
      value_template: >-
        {{ is_state('binary_sensor.early_morning', 'on') 
           and is_state('binary_sensor.house_sts_vacation', 'on')  }}
           
- platform: template # Vacation evening
  sensors:
    house_wakeup_vacation_evening:
      value_template: >-
        {{ is_state('binary_sensor.evening', 'on') 
           and is_state('binary_sensor.house_sts_vacation', 'on')  }}
